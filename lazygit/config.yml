customCommands:
  - key: <c-a>
    description: Lazycommit
    command: |
      (
        saved_stty=$(stty -g 2>/dev/null || true)
        
        cleanup() {
          # Restaurar el estado de la terminal
          [ -n "$saved_stty" ] && stty "$saved_stty" 2>/dev/null || true
          # Limpiar cualquier mensaje residual
          tput clear 2>/dev/null || true
          tput reset 2>/dev/null || true
        }
        
        trap cleanup EXIT INT TERM
        
        aichat "Please suggest 5 commit messages, given the following diff:

          \`\`\`diff
          $(git diff --cached)
          \`\`\`

          **Criteria:**

          1. Follow the conventional commits format: \`<type>: <description>\`
          2. Types: fix, feat, docs, style, refactor, test, chore
          3. Keep messages clear, concise and meaningful
          4. Focus on WHY and WHAT, not HOW
          5. Use imperative mood (e.g., 'add' not 'added')

          **Examples of good commits:**
          - fix: prevent racing of requests
          - feat: add support for dark mode
          - refactor: simplify error handling logic
          - docs: update API documentation
          
          **Recent Commits:**
          \`\`\`
          $(git log -n 5 --pretty=format:'%h %s')
          \`\`\`

          **Instructions:**

          - Take a moment to understand the changes made in the diff
          - Think about the impact of these changes on the project
          - Consider if this is a bug fix, new feature, improvement, or maintenance
          - Generate messages that will be helpful for future code reviews
          - Each message should stand alone and make sense without context

          **Output Format:**
          - List exactly 5 commit messages
          - Each on a new line
          - No numbering or bullets
          - No extra spacing or decorations
          - Follow the conventional commit format strictly

          Suggest 5 different commit messages that best describe these changes. Focus on impact and purpose, not implementation details." \
            | fzf --height 40% --border --ansi --preview "echo {}" --preview-window=up:wrap \
            | sed -E 's/^[0-9]+\.\s*//' \
            | (read -r message && git commit --no-verify -m "$message")
      )
    context: files
    subprocess: true
